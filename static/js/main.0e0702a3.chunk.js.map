{"version":3,"sources":["../ospbl/src/utils/constants.js","../ospbl/src/components/ProcessInput.jsx","../ospbl/src/components/GanttChart.jsx","../ospbl/src/components/ResultTable.jsx","../ospbl/src/components/ComparisonChart.jsx","../ospbl/src/App.js","../ospbl/src/algorithms/fcfs.js","../ospbl/src/algorithms/sjf.js","../ospbl/src/algorithms/priority.js","../ospbl/src/algorithms/rr.js","../ospbl/src/algorithms/srtf.js","../ospbl/src/algorithms/preemptivePriority.js","../ospbl/src/reportWebVitals.js","../ospbl/src/index.js"],"names":["COLORS","algorithms","id","name","ProcessInput","_ref","processes","handleProcessChange","removeProcess","addProcess","React","createElement","className","map","p","key","type","value","onChange","e","target","min","arrivalTime","burstTime","priority","onClick","GanttChart","data","length","maxTime","Math","max","item","end","pxPerUnit","style","position","width","height","border","background","borderRadius","margin","top","left","display","Array","from","_","i","textAlign","fontSize","color","idx","start","process","alignItems","justifyContent","boxShadow","title","concat","ResultTable","algorithmResult","processDetails","undefined","proc","completionTime","turnaroundTime","waitingTime","colSpan","averageWaitingTime","toFixed","averageTurnaroundTime","ComparisonChart","chartData","ResponsiveContainer","LineChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Line","stroke","CPUSchedulerSimulator","_algorithms$find","setProcesses","useState","quantum","setQuantum","selectedAlgorithm","setSelectedAlgorithm","chartMode","setChartMode","results","setResults","ganttData","setGanttData","field","_objectSpread","[object Object]","parseInt","filter","nextId","a","disabled","runSimulation","processData","allResults","allGanttData","fcfs","procs","result","waitingTimes","turnaroundTimes","gantt","sortedProcesses","sort","b","currentTime","forEach","push","Object","values","reduce","runFCFS","sjf","completed","shortestIndex","shortestBurst","Infinity","allArrived","nextArrival","runSJF","highestPriorityIndex","highestPriority","runPriority","rr","timeQuantum","remainingTime","allCompleted","queue","nextProcess","find","currentProcess","shift","executeTime","every","runRoundRobin","srtf","startTime","finishTime","lastProcess","shortestRemaining","mergedGantt","currentBlock","block","runSRTF","preemptivePriority","runPreemptivePriority","keys","Fragment","getComparisonChartData","_results$fcfs$average","_results$fcfs","_results$sjf$averageW","_results$sjf","_results$priority$ave","_results$priority","_results$rr$averageWa","_results$rr","_results$srtf$average","_results$srtf","_results$preemptivePr","_results$preemptivePr2","_results$fcfs$average2","_results$fcfs2","_results$sjf$averageT","_results$sjf2","_results$priority$ave2","_results$priority2","_results$rr$averageTu","_results$rr2","_results$srtf$average2","_results$srtf2","_results$preemptivePr3","_results$preemptivePr4","algo","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","App"],"mappings":"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","file":"static/js/main.0e0702a3.chunk.js","sourcesContent":["// Helper: Generate colors for processes\r\nexport const COLORS = [\r\n  \"#FF6384\", \r\n  \"#36A2EB\", \r\n  \"#FFCE56\", \r\n  \"#4BC0C0\", \r\n  \"#9966FF\", \r\n  \"#FF9F40\", \r\n  \"#8CD867\"\r\n];\r\n\r\n// Algorithms list\r\nexport const algorithms = [\r\n  { id: 'fcfs', name: 'First-Come-First-Serve' },\r\n  { id: 'sjf', name: 'Shortest Job First' },\r\n  { id: 'priority', name: 'Priority (Non-preemptive)' },\r\n  { id: 'rr', name: 'Round Robin' },\r\n  { id: 'srtf', name: 'Shortest Remaining Time First' },\r\n  { id: 'preemptivePriority', name: 'Priority (Preemptive)' },\r\n  { id: 'all', name: 'Compare All' }\r\n];","import React from 'react';\r\nimport { COLORS } from '../utils/constants';\r\n\r\nexport default function ProcessInput({ processes, handleProcessChange, removeProcess, addProcess }) {\r\n  return (\r\n    <div className=\"bg-white rounded shadow p-4 mb-6\">\r\n      <h2 className=\"text-lg font-semibold mb-2\">Processes</h2>\r\n      <table className=\"min-w-full border mb-2\">\r\n        <thead>\r\n          <tr className=\"bg-gray-100\">\r\n            <th>Name</th>\r\n            <th>Arrival</th>\r\n            <th>Burst</th>\r\n            <th>Priority</th>\r\n            <th>Remove</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {processes.map(p => (\r\n            <tr key={p.id}>\r\n              <td><input type=\"text\" value={p.name} onChange={e => handleProcessChange(p.id, 'name', e.target.value)} className=\"border rounded px-1 w-16\" /></td>\r\n              <td><input type=\"number\" min=\"0\" value={p.arrivalTime} onChange={e => handleProcessChange(p.id, 'arrivalTime', e.target.value)} className=\"border rounded px-1 w-16\" /></td>\r\n              <td><input type=\"number\" min=\"1\" value={p.burstTime} onChange={e => handleProcessChange(p.id, 'burstTime', e.target.value)} className=\"border rounded px-1 w-16\" /></td>\r\n              <td><input type=\"number\" min=\"1\" value={p.priority} onChange={e => handleProcessChange(p.id, 'priority', e.target.value)} className=\"border rounded px-1 w-16\" /></td>\r\n              <td><button onClick={() => removeProcess(p.id)} className=\"bg-red-500 text-white px-2 rounded\">X</button></td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <button onClick={addProcess} className=\"bg-green-600 text-white px-4 py-1 rounded\">Add Process</button>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function GanttChart({ data }) {\r\n  if (!data || data.length === 0) return <div className=\"text-gray-500\">No data to display</div>;\r\n\r\n  const maxTime = Math.max(...data.map(item => item.end));\r\n  const chartWidth = 600;\r\n  const pxPerUnit = chartWidth / (maxTime + 1);\r\n\r\n  return (\r\n    <div style={{ position: \"relative\", width: chartWidth, height: 60, border: \"1px solid #ddd\", background: \"#f9f9f9\", borderRadius: 8, margin: \"1rem 0\" }}>\r\n      <div style={{ position: \"absolute\", top: 0, left: 0, width: \"100%\", height: 20, display: \"flex\" }}>\r\n        {Array.from({ length: maxTime + 1 }).map((_, i) => (\r\n          <div key={i} style={{ width: pxPerUnit, textAlign: \"center\", fontSize: 12, color: \"#888\" }}>{i}</div>\r\n        ))}\r\n      </div>\r\n      <div style={{ position: \"absolute\", top: 25, left: 0, height: 30, width: \"100%\" }}>\r\n        {data.map((item, idx) => (\r\n          <div\r\n            key={idx}\r\n            style={{\r\n              position: \"absolute\",\r\n              left: item.start * pxPerUnit,\r\n              width: (item.end - item.start) * pxPerUnit,\r\n              height: 30,\r\n              background: item.process === \"Idle\" ? \"#bbb\" : (item.color || \"#36A2EB\"),\r\n              color: \"#fff\",\r\n              borderRadius: 4,\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n              fontSize: 13,\r\n              boxShadow: \"0 1px 2px rgba(0,0,0,0.08)\"\r\n            }}\r\n            title={`${item.process}: ${item.start} - ${item.end}`}\r\n          >\r\n            {item.process} ({item.start}-{item.end})\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function ResultTable({ algorithmResult }) {\r\n  if (!algorithmResult || !algorithmResult.processDetails) return null;\r\n\r\n  return (\r\n    <div className=\"overflow-x-auto mt-2\">\r\n      <table className=\"min-w-full border\">\r\n        <thead>\r\n          <tr className=\"bg-gray-100\">\r\n            <th>Process</th>\r\n            <th>Arrival</th>\r\n            <th>Burst</th>\r\n            {algorithmResult.processDetails[0].priority !== undefined && <th>Priority</th>}\r\n            <th>Completion</th>\r\n            <th>Turnaround</th>\r\n            <th>Waiting</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {algorithmResult.processDetails.map(proc => (\r\n            <tr key={proc.id}>\r\n              <td>{proc.name}</td>\r\n              <td>{proc.arrivalTime}</td>\r\n              <td>{proc.burstTime}</td>\r\n              {proc.priority !== undefined && <td>{proc.priority}</td>}\r\n              <td>{proc.completionTime}</td>\r\n              <td>{proc.turnaroundTime}</td>\r\n              <td>{proc.waitingTime}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n        <tfoot>\r\n          <tr>\r\n            <td colSpan={algorithmResult.processDetails[0].priority !== undefined ? 7 : 6}>\r\n              Avg Waiting: <b>{algorithmResult.averageWaitingTime.toFixed(2)}</b> &nbsp; | &nbsp;\r\n              Avg Turnaround: <b>{algorithmResult.averageTurnaroundTime.toFixed(2)}</b>\r\n            </td>\r\n          </tr>\r\n        </tfoot>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\r\n\r\nexport default function ComparisonChart({ chartData }) {\r\n  if (chartData.length === 0) return null;\r\n\r\n  return (\r\n    <div className=\"mt-6\">\r\n      <h3 className=\"font-semibold mb-2\">Algorithm Comparison (Line Chart)</h3>\r\n      <div style={{ height: 300 }}>\r\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n          <LineChart data={chartData}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n            <Line type=\"monotone\" dataKey=\"fcfs\" name=\"FCFS\" stroke=\"#FF6384\" />\r\n            <Line type=\"monotone\" dataKey=\"sjf\" name=\"SJF\" stroke=\"#36A2EB\" />\r\n            <Line type=\"monotone\" dataKey=\"priority\" name=\"Priority\" stroke=\"#FFCE56\" />\r\n            <Line type=\"monotone\" dataKey=\"rr\" name=\"Round Robin\" stroke=\"#4BC0C0\" />\r\n            <Line type=\"monotone\" dataKey=\"srtf\" name=\"SRTF\" stroke=\"#9966FF\" />\r\n            <Line type=\"monotone\" dataKey=\"preemptivePriority\" name=\"P-Priority\" stroke=\"#FF9F40\" />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport ProcessInput from \"./components/ProcessInput\";\r\nimport GanttChart from \"./components/GanttChart\";\r\nimport ResultTable from \"./components/ResultTable\";\r\nimport ComparisonChart from \"./components/ComparisonChart\";\r\n\r\nimport { runFCFS } from \"./algorithms/fcfs\";\r\nimport { runSJF } from \"./algorithms/sjf\";\r\nimport { runPriority } from \"./algorithms/priority\";\r\nimport { runRoundRobin } from \"./algorithms/rr\";\r\nimport { runSRTF } from \"./algorithms/srtf\";\r\nimport { runPreemptivePriority } from \"./algorithms/preemptivePriority\";\r\n\r\nimport { COLORS, algorithms } from \"./utils/constants\";\r\n\r\nexport default function CPUSchedulerSimulator() {\r\n  const [processes, setProcesses] = useState([\r\n    {\r\n      id: 1,\r\n      name: \"P1\",\r\n      arrivalTime: 0,\r\n      burstTime: 8,\r\n      priority: 3,\r\n      color: COLORS[0],\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"P2\",\r\n      arrivalTime: 1,\r\n      burstTime: 4,\r\n      priority: 1,\r\n      color: COLORS[1],\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"P3\",\r\n      arrivalTime: 2,\r\n      burstTime: 9,\r\n      priority: 2,\r\n      color: COLORS[2],\r\n    },\r\n    {\r\n      id: 4,\r\n      name: \"P4\",\r\n      arrivalTime: 3,\r\n      burstTime: 5,\r\n      priority: 4,\r\n      color: COLORS[3],\r\n    },\r\n  ]);\r\n\r\n  const [quantum, setQuantum] = useState(2);\r\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState(\"all\");\r\n  const [chartMode, setChartMode] = useState(\"gantt\");\r\n  const [results, setResults] = useState({});\r\n  const [ganttData, setGanttData] = useState({});\r\n\r\n  const addProcess = () => {\r\n    const nextId = processes.length\r\n      ? Math.max(...processes.map((p) => p.id)) + 1\r\n      : 1;\r\n    setProcesses([\r\n      ...processes,\r\n      {\r\n        id: nextId,\r\n        name: `P${nextId}`,\r\n        arrivalTime: 0,\r\n        burstTime: 5,\r\n        priority: 1,\r\n        color: COLORS[processes.length % COLORS.length],\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const removeProcess = (id) =>\r\n    setProcesses(processes.filter((p) => p.id !== id));\r\n\r\n  const handleProcessChange = (id, field, value) => {\r\n    setProcesses(\r\n      processes.map((p) =>\r\n        p.id === id\r\n          ? { ...p, [field]: field === \"name\" ? value : parseInt(value) || 0 }\r\n          : p\r\n      )\r\n    );\r\n  };\r\n\r\n  const runSimulation = () => {\r\n    const processData = [...processes];\r\n    const allResults = {};\r\n    const allGanttData = {};\r\n\r\n    allResults.fcfs = runFCFS(processData);\r\n    allGanttData.fcfs = allResults.fcfs.gantt;\r\n\r\n    allResults.sjf = runSJF(processData);\r\n    allGanttData.sjf = allResults.sjf.gantt;\r\n\r\n    allResults.priority = runPriority(processData);\r\n    allGanttData.priority = allResults.priority.gantt;\r\n\r\n    allResults.rr = runRoundRobin(processData, quantum);\r\n    allGanttData.rr = allResults.rr.gantt;\r\n\r\n    allResults.srtf = runSRTF(processData);\r\n    allGanttData.srtf = allResults.srtf.gantt;\r\n\r\n    allResults.preemptivePriority = runPreemptivePriority(processData);\r\n    allGanttData.preemptivePriority = allResults.preemptivePriority.gantt;\r\n\r\n    setResults(allResults);\r\n    setGanttData(allGanttData);\r\n  };\r\n\r\n  const getComparisonChartData = () => {\r\n    if (Object.keys(results).length === 0) return [];\r\n    return [\r\n      {\r\n        name: \"Avg. Waiting Time\",\r\n        fcfs: results.fcfs?.averageWaitingTime ?? 0,\r\n        sjf: results.sjf?.averageWaitingTime ?? 0,\r\n        priority: results.priority?.averageWaitingTime ?? 0,\r\n        rr: results.rr?.averageWaitingTime ?? 0,\r\n        srtf: results.srtf?.averageWaitingTime ?? 0,\r\n        preemptivePriority: results.preemptivePriority?.averageWaitingTime ?? 0,\r\n      },\r\n      {\r\n        name: \"Avg. Turnaround Time\",\r\n        fcfs: results.fcfs?.averageTurnaroundTime ?? 0,\r\n        sjf: results.sjf?.averageTurnaroundTime ?? 0,\r\n        priority: results.priority?.averageTurnaroundTime ?? 0,\r\n        rr: results.rr?.averageTurnaroundTime ?? 0,\r\n        srtf: results.srtf?.averageTurnaroundTime ?? 0,\r\n        preemptivePriority:\r\n          results.preemptivePriority?.averageTurnaroundTime ?? 0,\r\n      },\r\n    ];\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4 max-w-7xl mx-auto\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">CPU Scheduling Simulator</h1>\r\n\r\n      <ProcessInput\r\n        processes={processes}\r\n        handleProcessChange={handleProcessChange}\r\n        removeProcess={removeProcess}\r\n        addProcess={addProcess}\r\n      />\r\n\r\n      <div className=\"bg-white rounded shadow p-4 mb-6\">\r\n        <h2 className=\"text-lg font-semibold mb-2\">Algorithm & Chart</h2>\r\n        <div className=\"flex flex-wrap gap-4 items-center mb-2\">\r\n          <select\r\n            value={selectedAlgorithm}\r\n            onChange={(e) => setSelectedAlgorithm(e.target.value)}\r\n            className=\"border rounded p-2\"\r\n          >\r\n            {algorithms.map((a) => (\r\n              <option key={a.id} value={a.id}>\r\n                {a.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          <input\r\n            type=\"number\"\r\n            min=\"1\"\r\n            value={quantum}\r\n            onChange={(e) => setQuantum(parseInt(e.target.value) || 1)}\r\n            className=\"border rounded p-2 w-24\"\r\n            disabled={selectedAlgorithm !== \"rr\"}\r\n          />\r\n          <button\r\n            onClick={() => setChartMode(\"gantt\")}\r\n            className={`px-3 py-1 rounded ${\r\n              chartMode === \"gantt\" ? \"bg-blue-600 text-white\" : \"bg-gray-200\"\r\n            }`}\r\n          >\r\n            Gantt Chart\r\n          </button>\r\n          <button\r\n            onClick={() => setChartMode(\"line\")}\r\n            className={`px-3 py-1 rounded ${\r\n              chartMode === \"line\" ? \"bg-blue-600 text-white\" : \"bg-gray-200\"\r\n            }`}\r\n          >\r\n            Line Chart\r\n          </button>\r\n          <button\r\n            onClick={runSimulation}\r\n            className=\"bg-blue-600 text-white px-4 py-1 rounded\"\r\n          >\r\n            Run Simulation\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {Object.keys(results).length > 0 && (\r\n        <div className=\"bg-white rounded shadow p-4 mb-6\">\r\n          <h2 className=\"text-lg font-semibold mb-2\">Results</h2>\r\n          {selectedAlgorithm === \"all\" ? (\r\n            <>\r\n              {chartMode === \"line\" && (\r\n                <ComparisonChart chartData={getComparisonChartData()} />\r\n              )}\r\n              {chartMode === \"gantt\" && (\r\n                <div className=\"flex flex-row flex-wrap gap-8\">\r\n                  {[\r\n                    \"fcfs\",\r\n                    \"sjf\",\r\n                    \"priority\",\r\n                    \"rr\",\r\n                    \"srtf\",\r\n                    \"preemptivePriority\",\r\n                  ].map((algo) => (\r\n                    <div key={algo} className=\"flex-1 min-w-[340px]\">\r\n                      <h3 className=\"font-semibold mb-1\">\r\n                        {algorithms.find((a) => a.id === algo).name}\r\n                      </h3>\r\n                      <GanttChart data={ganttData[algo]} />\r\n                      <ResultTable algorithmResult={results[algo]} />\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </>\r\n          ) : (\r\n            <>\r\n              <h3 className=\"font-semibold mb-1\">\r\n                {algorithms.find((a) => a.id === selectedAlgorithm)?.name}\r\n              </h3>\r\n              {chartMode === \"gantt\" && (\r\n                <GanttChart data={ganttData[selectedAlgorithm]} />\r\n              )}\r\n              <ResultTable algorithmResult={results[selectedAlgorithm]} />\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","export function runFCFS(procs) {\r\n    const result = [];\r\n    const waitingTimes = {};\r\n    const turnaroundTimes = {};\r\n    const gantt = [];\r\n    const sortedProcesses = [...procs].sort((a, b) => a.arrivalTime - b.arrivalTime);\r\n    let currentTime = 0;\r\n  \r\n    sortedProcesses.forEach(process => {\r\n      if (process.arrivalTime > currentTime) {\r\n        gantt.push({ start: currentTime, end: process.arrivalTime, process: \"Idle\" });\r\n        currentTime = process.arrivalTime;\r\n      }\r\n      waitingTimes[process.id] = currentTime - process.arrivalTime;\r\n      gantt.push({\r\n        start: currentTime,\r\n        end: currentTime + process.burstTime,\r\n        process: process.name,\r\n        color: process.color\r\n      });\r\n      currentTime += process.burstTime;\r\n      turnaroundTimes[process.id] = waitingTimes[process.id] + process.burstTime;\r\n      result.push({\r\n        id: process.id,\r\n        name: process.name,\r\n        arrivalTime: process.arrivalTime,\r\n        burstTime: process.burstTime,\r\n        waitingTime: waitingTimes[process.id],\r\n        turnaroundTime: turnaroundTimes[process.id],\r\n        completionTime: currentTime\r\n      });\r\n    });\r\n  \r\n    return {\r\n      processDetails: result,\r\n      averageWaitingTime: Object.values(waitingTimes).reduce((a, b) => a + b, 0) / procs.length,\r\n      averageTurnaroundTime: Object.values(turnaroundTimes).reduce((a, b) => a + b, 0) / procs.length,\r\n      gantt\r\n    };\r\n  }\r\n  ","export function runSJF(procs) {\r\n    const result = [];\r\n    const waitingTimes = {};\r\n    const turnaroundTimes = {};\r\n    const gantt = [];\r\n    const processes = [...procs].map(p => ({ ...p }));\r\n    let currentTime = 0;\r\n    let completed = 0;\r\n  \r\n    while (completed < processes.length) {\r\n      let shortestIndex = -1;\r\n      let shortestBurst = Infinity;\r\n      let allArrived = false;\r\n      for (let i = 0; i < processes.length; i++) {\r\n        if (processes[i].completed) continue;\r\n        if (processes[i].arrivalTime <= currentTime) {\r\n          allArrived = true;\r\n          if (processes[i].burstTime < shortestBurst) {\r\n            shortestBurst = processes[i].burstTime;\r\n            shortestIndex = i;\r\n          }\r\n        }\r\n      }\r\n      if (!allArrived) {\r\n        let nextArrival = Math.min(...processes.filter(p => !p.completed).map(p => p.arrivalTime));\r\n        gantt.push({ start: currentTime, end: nextArrival, process: \"Idle\" });\r\n        currentTime = nextArrival;\r\n        continue;\r\n      }\r\n      const process = processes[shortestIndex];\r\n      waitingTimes[process.id] = currentTime - process.arrivalTime;\r\n      gantt.push({\r\n        start: currentTime,\r\n        end: currentTime + process.burstTime,\r\n        process: process.name,\r\n        color: process.color\r\n      });\r\n      currentTime += process.burstTime;\r\n      turnaroundTimes[process.id] = waitingTimes[process.id] + process.burstTime;\r\n      process.completed = true;\r\n      completed++;\r\n      result.push({\r\n        id: process.id,\r\n        name: process.name,\r\n        arrivalTime: process.arrivalTime,\r\n        burstTime: process.burstTime,\r\n        waitingTime: waitingTimes[process.id],\r\n        turnaroundTime: turnaroundTimes[process.id],\r\n        completionTime: currentTime\r\n      });\r\n    }\r\n  \r\n    return {\r\n      processDetails: result,\r\n      averageWaitingTime: Object.values(waitingTimes).reduce((a, b) => a + b, 0) / procs.length,\r\n      averageTurnaroundTime: Object.values(turnaroundTimes).reduce((a, b) => a + b, 0) / procs.length,\r\n      gantt\r\n    };\r\n  }\r\n  ","export function runPriority(procs) {\r\n    const result = [];\r\n    const waitingTimes = {};\r\n    const turnaroundTimes = {};\r\n    const gantt = [];\r\n    const processes = [...procs].map(p => ({ ...p }));\r\n    let currentTime = 0;\r\n    let completed = 0;\r\n  \r\n    while (completed < processes.length) {\r\n      let highestPriorityIndex = -1;\r\n      let highestPriority = Infinity;\r\n      let allArrived = false;\r\n      for (let i = 0; i < processes.length; i++) {\r\n        if (processes[i].completed) continue;\r\n        if (processes[i].arrivalTime <= currentTime) {\r\n          allArrived = true;\r\n          if (processes[i].priority < highestPriority) {\r\n            highestPriority = processes[i].priority;\r\n            highestPriorityIndex = i;\r\n          }\r\n        }\r\n      }\r\n      if (!allArrived) {\r\n        let nextArrival = Math.min(...processes.filter(p => !p.completed).map(p => p.arrivalTime));\r\n        gantt.push({ start: currentTime, end: nextArrival, process: \"Idle\" });\r\n        currentTime = nextArrival;\r\n        continue;\r\n      }\r\n      const process = processes[highestPriorityIndex];\r\n      waitingTimes[process.id] = currentTime - process.arrivalTime;\r\n      gantt.push({\r\n        start: currentTime,\r\n        end: currentTime + process.burstTime,\r\n        process: process.name,\r\n        color: process.color\r\n      });\r\n      currentTime += process.burstTime;\r\n      turnaroundTimes[process.id] = waitingTimes[process.id] + process.burstTime;\r\n      process.completed = true;\r\n      completed++;\r\n      result.push({\r\n        id: process.id,\r\n        name: process.name,\r\n        arrivalTime: process.arrivalTime,\r\n        burstTime: process.burstTime,\r\n        priority: process.priority,\r\n        waitingTime: waitingTimes[process.id],\r\n        turnaroundTime: turnaroundTimes[process.id],\r\n        completionTime: currentTime\r\n      });\r\n    }\r\n  \r\n    return {\r\n      processDetails: result,\r\n      averageWaitingTime: Object.values(waitingTimes).reduce((a, b) => a + b, 0) / procs.length,\r\n      averageTurnaroundTime: Object.values(turnaroundTimes).reduce((a, b) => a + b, 0) / procs.length,\r\n      gantt\r\n    };\r\n  }\r\n  ","export function runRoundRobin(procs, timeQuantum) {\r\n    const result = [];\r\n    const waitingTimes = {};\r\n    const turnaroundTimes = {};\r\n    const gantt = [];\r\n    const processes = [...procs].map(p => ({\r\n      ...p,\r\n      remainingTime: p.burstTime,\r\n      completed: false\r\n    }));\r\n    processes.forEach(p => {\r\n      waitingTimes[p.id] = 0;\r\n    });\r\n    let currentTime = 0;\r\n    let allCompleted = false;\r\n    processes.sort((a, b) => a.arrivalTime - b.arrivalTime);\r\n    if (processes[0].arrivalTime > 0) {\r\n      gantt.push({ start: 0, end: processes[0].arrivalTime, process: \"Idle\" });\r\n      currentTime = processes[0].arrivalTime;\r\n    }\r\n    const queue = [];\r\n    let i = 0;\r\n    if (processes.length > 0) {\r\n      queue.push(processes[0]);\r\n      i = 1;\r\n    }\r\n    while (!allCompleted) {\r\n      if (queue.length === 0) {\r\n        const nextProcess = processes.find(p => !p.completed && p.arrivalTime > currentTime);\r\n        if (nextProcess) {\r\n          gantt.push({ start: currentTime, end: nextProcess.arrivalTime, process: \"Idle\" });\r\n          currentTime = nextProcess.arrivalTime;\r\n          queue.push(nextProcess);\r\n        } else {\r\n          allCompleted = true;\r\n          continue;\r\n        }\r\n      }\r\n      const currentProcess = queue.shift();\r\n      while (i < processes.length && processes[i].arrivalTime <= currentTime) {\r\n        queue.push(processes[i]);\r\n        i++;\r\n      }\r\n      if (currentProcess.completed) continue;\r\n      const executeTime = Math.min(timeQuantum, currentProcess.remainingTime);\r\n      gantt.push({\r\n        start: currentTime,\r\n        end: currentTime + executeTime,\r\n        process: currentProcess.name,\r\n        color: currentProcess.color\r\n      });\r\n      currentProcess.remainingTime -= executeTime;\r\n      currentTime += executeTime;\r\n      if (currentProcess.remainingTime === 0) {\r\n        currentProcess.completed = true;\r\n        turnaroundTimes[currentProcess.id] = currentTime - currentProcess.arrivalTime;\r\n        waitingTimes[currentProcess.id] = turnaroundTimes[currentProcess.id] - currentProcess.burstTime;\r\n      } else {\r\n        while (i < processes.length && processes[i].arrivalTime <= currentTime) {\r\n          queue.push(processes[i]);\r\n          i++;\r\n        }\r\n        queue.push(currentProcess);\r\n      }\r\n      allCompleted = processes.every(p => p.completed);\r\n    }\r\n    processes.forEach(process => {\r\n      result.push({\r\n        id: process.id,\r\n        name: process.name,\r\n        arrivalTime: process.arrivalTime,\r\n        burstTime: process.burstTime,\r\n        waitingTime: waitingTimes[process.id],\r\n        turnaroundTime: turnaroundTimes[process.id],\r\n        completionTime: process.arrivalTime + turnaroundTimes[process.id]\r\n      });\r\n    });\r\n    return {\r\n      processDetails: result,\r\n      averageWaitingTime: Object.values(waitingTimes).reduce((a, b) => a + b, 0) / procs.length,\r\n      averageTurnaroundTime: Object.values(turnaroundTimes).reduce((a, b) => a + b, 0) / procs.length,\r\n      gantt\r\n    };\r\n  }\r\n  ","export function runSRTF(procs) {\r\n    const result = [];\r\n    const waitingTimes = {};\r\n    const turnaroundTimes = {};\r\n    const gantt = [];\r\n    const processes = [...procs].map(p => ({\r\n      ...p,\r\n      remainingTime: p.burstTime,\r\n      completed: false,\r\n      startTime: -1,\r\n      finishTime: -1\r\n    }));\r\n    let currentTime = 0;\r\n    let completed = 0;\r\n    let lastProcess = null;\r\n  \r\n    while (completed < processes.length) {\r\n      let shortestIndex = -1;\r\n      let shortestRemaining = Infinity;\r\n      for (let i = 0; i < processes.length; i++) {\r\n        if (!processes[i].completed && processes[i].arrivalTime <= currentTime) {\r\n          if (processes[i].remainingTime < shortestRemaining) {\r\n            shortestRemaining = processes[i].remainingTime;\r\n            shortestIndex = i;\r\n          }\r\n        }\r\n      }\r\n      if (shortestIndex === -1) {\r\n        let nextArrival = Math.min(...processes.filter(p => !p.completed).map(p => p.arrivalTime));\r\n        if (lastProcess !== \"Idle\") {\r\n          gantt.push({ start: currentTime, end: nextArrival, process: \"Idle\" });\r\n          lastProcess = \"Idle\";\r\n        } else if (gantt.length > 0) {\r\n          gantt[gantt.length - 1].end = nextArrival;\r\n        }\r\n        currentTime = nextArrival;\r\n        continue;\r\n      }\r\n      if (processes[shortestIndex].startTime === -1) {\r\n        processes[shortestIndex].startTime = currentTime;\r\n      }\r\n      if (lastProcess !== processes[shortestIndex].name) {\r\n        gantt.push({\r\n          start: currentTime,\r\n          end: currentTime + 1,\r\n          process: processes[shortestIndex].name,\r\n          color: processes[shortestIndex].color\r\n        });\r\n        lastProcess = processes[shortestIndex].name;\r\n      } else {\r\n        gantt[gantt.length - 1].end = currentTime + 1;\r\n      }\r\n      processes[shortestIndex].remainingTime--;\r\n      currentTime++;\r\n      if (processes[shortestIndex].remainingTime === 0) {\r\n        processes[shortestIndex].completed = true;\r\n        processes[shortestIndex].finishTime = currentTime;\r\n        completed++;\r\n        turnaroundTimes[processes[shortestIndex].id] = processes[shortestIndex].finishTime - processes[shortestIndex].arrivalTime;\r\n        waitingTimes[processes[shortestIndex].id] = turnaroundTimes[processes[shortestIndex].id] - processes[shortestIndex].burstTime;\r\n      }\r\n    }\r\n    const mergedGantt = [];\r\n    let currentBlock = null;\r\n    for (const block of gantt) {\r\n      if (!currentBlock || currentBlock.process !== block.process) {\r\n        currentBlock = { ...block };\r\n        mergedGantt.push(currentBlock);\r\n      } else {\r\n        currentBlock.end = block.end;\r\n      }\r\n    }\r\n    processes.forEach(process => {\r\n      result.push({\r\n        id: process.id,\r\n        name: process.name,\r\n        arrivalTime: process.arrivalTime,\r\n        burstTime: process.burstTime,\r\n        waitingTime: waitingTimes[process.id],\r\n        turnaroundTime: turnaroundTimes[process.id],\r\n        completionTime: process.finishTime\r\n      });\r\n    });\r\n    return {\r\n      processDetails: result,\r\n      averageWaitingTime: Object.values(waitingTimes).reduce((a, b) => a + b, 0) / procs.length,\r\n      averageTurnaroundTime: Object.values(turnaroundTimes).reduce((a, b) => a + b, 0) / procs.length,\r\n      gantt: mergedGantt\r\n    };\r\n  }\r\n  ","export function runPreemptivePriority(procs) {\r\n    const result = [];\r\n    const waitingTimes = {};\r\n    const turnaroundTimes = {};\r\n    const gantt = [];\r\n    const processes = [...procs].map(p => ({\r\n      ...p,\r\n      remainingTime: p.burstTime,\r\n      completed: false,\r\n      startTime: -1,\r\n      finishTime: -1\r\n    }));\r\n    let currentTime = 0;\r\n    let completed = 0;\r\n    let lastProcess = null;\r\n  \r\n    while (completed < processes.length) {\r\n      let highestPriorityIndex = -1;\r\n      let highestPriority = Infinity;\r\n      for (let i = 0; i < processes.length; i++) {\r\n        if (!processes[i].completed && processes[i].arrivalTime <= currentTime) {\r\n          if (processes[i].priority < highestPriority) {\r\n            highestPriority = processes[i].priority;\r\n            highestPriorityIndex = i;\r\n          }\r\n        }\r\n      }\r\n      if (highestPriorityIndex === -1) {\r\n        let nextArrival = Math.min(...processes.filter(p => !p.completed).map(p => p.arrivalTime));\r\n        if (lastProcess !== \"Idle\") {\r\n          gantt.push({ start: currentTime, end: nextArrival, process: \"Idle\" });\r\n          lastProcess = \"Idle\";\r\n        } else if (gantt.length > 0) {\r\n          gantt[gantt.length - 1].end = nextArrival;\r\n        }\r\n        currentTime = nextArrival;\r\n        continue;\r\n      }\r\n      if (processes[highestPriorityIndex].startTime === -1) {\r\n        processes[highestPriorityIndex].startTime = currentTime;\r\n      }\r\n      if (lastProcess !== processes[highestPriorityIndex].name) {\r\n        gantt.push({\r\n          start: currentTime,\r\n          end: currentTime + 1,\r\n          process: processes[highestPriorityIndex].name,\r\n          color: processes[highestPriorityIndex].color\r\n        });\r\n        lastProcess = processes[highestPriorityIndex].name;\r\n      } else {\r\n        gantt[gantt.length - 1].end = currentTime + 1;\r\n      }\r\n      processes[highestPriorityIndex].remainingTime--;\r\n      currentTime++;\r\n      if (processes[highestPriorityIndex].remainingTime === 0) {\r\n        processes[highestPriorityIndex].completed = true;\r\n        processes[highestPriorityIndex].finishTime = currentTime;\r\n        completed++;\r\n        turnaroundTimes[processes[highestPriorityIndex].id] = currentTime - processes[highestPriorityIndex].arrivalTime;\r\n        waitingTimes[processes[highestPriorityIndex].id] = turnaroundTimes[processes[highestPriorityIndex].id] - processes[highestPriorityIndex].burstTime;\r\n      }\r\n    }\r\n    const mergedGantt = [];\r\n    let currentBlock = null;\r\n    for (const block of gantt) {\r\n      if (!currentBlock || currentBlock.process !== block.process) {\r\n        currentBlock = { ...block };\r\n        mergedGantt.push(currentBlock);\r\n      } else {\r\n        currentBlock.end = block.end;\r\n      }\r\n    }\r\n    processes.forEach(process => {\r\n      result.push({\r\n        id: process.id,\r\n        name: process.name,\r\n        arrivalTime: process.arrivalTime,\r\n        burstTime: process.burstTime,\r\n        priority: process.priority,\r\n        waitingTime: waitingTimes[process.id],\r\n        turnaroundTime: turnaroundTimes[process.id],\r\n        completionTime: process.finishTime\r\n      });\r\n    });\r\n    return {\r\n      processDetails: result,\r\n      averageWaitingTime: Object.values(waitingTimes).reduce((a, b) => a + b, 0) / procs.length,\r\n      averageTurnaroundTime: Object.values(turnaroundTimes).reduce((a, b) => a + b, 0) / procs.length,\r\n      gantt: mergedGantt\r\n    };\r\n  }\r\n  ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}